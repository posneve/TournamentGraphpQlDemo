// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentGraphpQlDemo.Infrastructure.EntityFramework;

#nullable disable

namespace TournamentGraphpQlDemo.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(TournamentContext))]
    [Migration("20240426124617_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClubPlayer", b =>
                {
                    b.Property<Guid>("ClubsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uuid");

                    b.HasKey("ClubsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("ClubPlayer");
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlayersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("PlayerTeam");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("GuestTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("GuestTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.MatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventCategory")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchEvents");

                    b.HasDiscriminator<string>("EventCategory").HasValue("MatchEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.MatchGenericEvent", b =>
                {
                    b.HasBaseType("TournamentGraphpQlDemo.Domain.MatchEvent");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EventType");

                    b.HasDiscriminator().HasValue("MatchGenericEvent");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.MatchPlayerEvent", b =>
                {
                    b.HasBaseType("TournamentGraphpQlDemo.Domain.MatchEvent");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PlayerEventType");

                    b.Property<bool>("IsHomeTeam")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("MatchPlayerEvent");
                });

            modelBuilder.Entity("ClubPlayer", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Club", null)
                        .WithMany()
                        .HasForeignKey("ClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentGraphpQlDemo.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentGraphpQlDemo.Domain.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Match", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Court", "Court")
                        .WithMany("Matches")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentGraphpQlDemo.Domain.Team", "GuestTeam")
                        .WithMany("GuestMatches")
                        .HasForeignKey("GuestTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentGraphpQlDemo.Domain.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("GuestTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.MatchEvent", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Match", "Match")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Team", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Club", "Club")
                        .WithMany("Teams")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.MatchPlayerEvent", b =>
                {
                    b.HasOne("TournamentGraphpQlDemo.Domain.Player", "Player")
                        .WithMany("MatchEvents")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Club", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Court", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Match", b =>
                {
                    b.Navigation("MatchEvents");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Player", b =>
                {
                    b.Navigation("MatchEvents");
                });

            modelBuilder.Entity("TournamentGraphpQlDemo.Domain.Team", b =>
                {
                    b.Navigation("GuestMatches");

                    b.Navigation("HomeMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
